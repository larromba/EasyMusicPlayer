///
/// @Generated by Mockolo
///



import AVFoundation
import Combine
import Foundation
import MediaPlayer
import UIKit
@testable import EasyMusicPlayer


class URLSharableMock: URLSharable {
    init() { }


    private(set) var openCallCount = 0
    var openHandler: ((URL, [UIApplication.OpenExternalURLOptionsKey : Any], ((Bool) -> Void)?) -> ())?
    func open(_ url: URL, options: [UIApplication.OpenExternalURLOptionsKey : Any], completionHandler completion: ((Bool) -> Void)?)  {
        openCallCount += 1
        if let openHandler = openHandler {
            openHandler(url, options, completion)
        }
        
    }
}

class AudioClockingMock: AudioClocking {
    init() { }


    private(set) var callbackSetCallCount = 0
    var callback: (() -> Void)? = nil { didSet { callbackSetCallCount += 1 } }

    private(set) var startCallCount = 0
    var startHandler: (() -> ())?
    func start()  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: (() -> ())?
    func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
}

class QueueMock: Queue {
    init() { }
    init(maxConcurrentOperationCount: Int = 0) {
        self.maxConcurrentOperationCount = maxConcurrentOperationCount
    }


    private(set) var maxConcurrentOperationCountSetCallCount = 0
    var maxConcurrentOperationCount: Int = 0 { didSet { maxConcurrentOperationCountSetCallCount += 1 } }

    private(set) var addOperationCallCount = 0
    var addOperationHandler: ((@escaping @Sendable () -> Void) -> ())?
    func addOperation(_ block: @escaping @Sendable () -> Void)  {
        addOperationCallCount += 1
        if let addOperationHandler = addOperationHandler {
            addOperationHandler(block)
        }
        
    }

    private(set) var cancelAllOperationsCallCount = 0
    var cancelAllOperationsHandler: (() -> ())?
    func cancelAllOperations()  {
        cancelAllOperationsCallCount += 1
        if let cancelAllOperationsHandler = cancelAllOperationsHandler {
            cancelAllOperationsHandler()
        }
        
    }
}

class SeekableMock: Seekable {
    init() { }


    private(set) var seekSetCallCount = 0
    var seek: ((TimeInterval) -> Void)? = nil { didSet { seekSetCallCount += 1 } }

    private(set) var seekActionCallCount = 0
    var seekActionHandler: ((SeekDirection) -> ())?
    func seek(_ action: SeekDirection)  {
        seekActionCallCount += 1
        if let seekActionHandler = seekActionHandler {
            seekActionHandler(action)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: (() -> ())?
    func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }
}

class NowPlayingInfoCenterMock: NowPlayingInfoCenter {
    init() { }
    init(nowPlayingInfo: [String: Any]? = nil) {
        self.nowPlayingInfo = nowPlayingInfo
    }


    private(set) var nowPlayingInfoSetCallCount = 0
    var nowPlayingInfo: [String: Any]? = nil { didSet { nowPlayingInfoSetCallCount += 1 } }
}

class SoundEffectingMock: SoundEffecting {
    init() { }


    private(set) var playCallCount = 0
    var playHandler: ((SoundEffect) -> ())?
    func play(_ sound: SoundEffect)  {
        playCallCount += 1
        if let playHandler = playHandler {
            playHandler(sound)
        }
        
    }
}

class MusicInterruptionHandlingMock: MusicInterruptionHandling {
    init() { }
    init(isPlaying: Bool = false) {
        self.isPlaying = isPlaying
    }


    private(set) var callbackSetCallCount = 0
    var callback: ((MusicInterruptionAction) -> Void)? = nil { didSet { callbackSetCallCount += 1 } }

    private(set) var isPlayingSetCallCount = 0
    var isPlaying: Bool = false { didSet { isPlayingSetCallCount += 1 } }
}

class MusicAuthorizableMock: MusicAuthorizable {
    init() { }
    init(isAuthorized: Bool = false) {
        self.isAuthorized = isAuthorized
    }


    private(set) var isAuthorizedSetCallCount = 0
    var isAuthorized: Bool = false { didSet { isAuthorizedSetCallCount += 1 } }

    private(set) var authorizeCallCount = 0
    var authorizeHandler: ((@escaping ((_ success: Bool) -> Void)) -> ())?
    func authorize(_ completion: @escaping ((_ success: Bool) -> Void))  {
        authorizeCallCount += 1
        if let authorizeHandler = authorizeHandler {
            authorizeHandler(completion)
        }
        
    }
}

class PlaylistableMock: Playlistable {
    init() { }


    private(set) var createCallCount = 0
    var createHandler: ((Bool) -> ([MPMediaItem]))?
    func create(shuffled: Bool) -> [MPMediaItem] {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(shuffled)
        }
        return [MPMediaItem]()
    }

    private(set) var findCallCount = 0
    var findHandler: (([UInt64]) -> ([MPMediaItem]))?
    func find(ids: [UInt64]) -> [MPMediaItem] {
        findCallCount += 1
        if let findHandler = findHandler {
            return findHandler(ids)
        }
        return [MPMediaItem]()
    }
}

class UserServicingMock: UserServicing {
    init() { }
    init(repeatMode: RepeatMode? = nil, currentTrackID: MPMediaEntityPersistentID? = nil, trackIDs: [MPMediaEntityPersistentID]? = nil) {
        self.repeatMode = repeatMode
        self.currentTrackID = currentTrackID
        self.trackIDs = trackIDs
    }


    private(set) var repeatModeSetCallCount = 0
    var repeatMode: RepeatMode? = nil { didSet { repeatModeSetCallCount += 1 } }

    private(set) var currentTrackIDSetCallCount = 0
    var currentTrackID: MPMediaEntityPersistentID? = nil { didSet { currentTrackIDSetCallCount += 1 } }

    private(set) var trackIDsSetCallCount = 0
    var trackIDs: [MPMediaEntityPersistentID]? = nil { didSet { trackIDsSetCallCount += 1 } }
}

class AudioSessionRouteDescriptionMock: AudioSessionRouteDescription {
    init() { }
    init(inputs: [AVAudioSessionPortDescription] = [AVAudioSessionPortDescription](), outputs: [AVAudioSessionPortDescription] = [AVAudioSessionPortDescription](), outputRoutes: [AVAudioSession.Port] = [AVAudioSession.Port]()) {
        self.inputs = inputs
        self.outputs = outputs
        self.outputRoutes = outputRoutes
    }


    private(set) var inputsSetCallCount = 0
    var inputs: [AVAudioSessionPortDescription] = [AVAudioSessionPortDescription]() { didSet { inputsSetCallCount += 1 } }

    private(set) var outputsSetCallCount = 0
    var outputs: [AVAudioSessionPortDescription] = [AVAudioSessionPortDescription]() { didSet { outputsSetCallCount += 1 } }

    private(set) var outputRoutesSetCallCount = 0
    var outputRoutes: [AVAudioSession.Port] = [AVAudioSession.Port]() { didSet { outputRoutesSetCallCount += 1 } }
}

class MusicPlayableMock: MusicPlayable {
    init() { }
    init(info: MusicPlayerInformation) {
        self._info = info
    }


    var state: AnyPublisher<MusicPlayerState, Never> { return self.stateSubject.eraseToAnyPublisher() }
    private(set) var stateSubject = PassthroughSubject<MusicPlayerState, Never>()

    private(set) var infoSetCallCount = 0
    private var _info: MusicPlayerInformation!  { didSet { infoSetCallCount += 1 } }
    var info: MusicPlayerInformation {
        get { return _info }
        set { _info = newValue }
    }

    private(set) var authorizeCallCount = 0
    var authorizeHandler: (() -> ())?
    func authorize()  {
        authorizeCallCount += 1
        if let authorizeHandler = authorizeHandler {
            authorizeHandler()
        }
        
    }

    private(set) var playCallCount = 0
    var playHandler: ((MPMediaItem) -> ())?
    func play(_ track: MPMediaItem)  {
        playCallCount += 1
        if let playHandler = playHandler {
            playHandler(track)
        }
        
    }

    private(set) var playPositionCallCount = 0
    var playPositionHandler: ((MusicQueueTrackPosition) -> ())?
    func play(_ position: MusicQueueTrackPosition)  {
        playPositionCallCount += 1
        if let playPositionHandler = playPositionHandler {
            playPositionHandler(position)
        }
        
    }

    private(set) var pauseCallCount = 0
    var pauseHandler: (() -> ())?
    func pause()  {
        pauseCallCount += 1
        if let pauseHandler = pauseHandler {
            pauseHandler()
        }
        
    }

    private(set) var togglePlayPauseCallCount = 0
    var togglePlayPauseHandler: (() -> ())?
    func togglePlayPause()  {
        togglePlayPauseCallCount += 1
        if let togglePlayPauseHandler = togglePlayPauseHandler {
            togglePlayPauseHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: (() -> ())?
    func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    private(set) var previousCallCount = 0
    var previousHandler: (() -> ())?
    func previous()  {
        previousCallCount += 1
        if let previousHandler = previousHandler {
            previousHandler()
        }
        
    }

    private(set) var nextCallCount = 0
    var nextHandler: (() -> ())?
    func next()  {
        nextCallCount += 1
        if let nextHandler = nextHandler {
            nextHandler()
        }
        
    }

    private(set) var shuffleCallCount = 0
    var shuffleHandler: (() -> ())?
    func shuffle()  {
        shuffleCallCount += 1
        if let shuffleHandler = shuffleHandler {
            shuffleHandler()
        }
        
    }

    private(set) var toggleRepeatModeCallCount = 0
    var toggleRepeatModeHandler: (() -> ())?
    func toggleRepeatMode()  {
        toggleRepeatModeCallCount += 1
        if let toggleRepeatModeHandler = toggleRepeatModeHandler {
            toggleRepeatModeHandler()
        }
        
    }

    private(set) var setRepeatModeCallCount = 0
    var setRepeatModeHandler: ((RepeatMode) -> ())?
    func setRepeatMode(_ repeatMode: RepeatMode)  {
        setRepeatModeCallCount += 1
        if let setRepeatModeHandler = setRepeatModeHandler {
            setRepeatModeHandler(repeatMode)
        }
        
    }

    private(set) var setClockCallCount = 0
    var setClockHandler: ((TimeInterval, Bool) -> ())?
    func setClock(_ timeInterval: TimeInterval, isScrubbing: Bool)  {
        setClockCallCount += 1
        if let setClockHandler = setClockHandler {
            setClockHandler(timeInterval, isScrubbing)
        }
        
    }

    private(set) var startSeekingCallCount = 0
    var startSeekingHandler: ((SeekDirection) -> ())?
    func startSeeking(_ direction: SeekDirection)  {
        startSeekingCallCount += 1
        if let startSeekingHandler = startSeekingHandler {
            startSeekingHandler(direction)
        }
        
    }

    private(set) var stopSeekingCallCount = 0
    var stopSeekingHandler: (() -> ())?
    func stopSeeking()  {
        stopSeekingCallCount += 1
        if let stopSeekingHandler = stopSeekingHandler {
            stopSeekingHandler()
        }
        
    }
}

class MusicQueuableMock: MusicQueuable {
    init() { }
    init(current: MPMediaItem? = nil, repeatMode: RepeatMode, index: Int = 0, items: [MPMediaItem] = [MPMediaItem]()) {
        self.current = current
        self._repeatMode = repeatMode
        self.index = index
        self.items = items
    }


    private(set) var currentSetCallCount = 0
    var current: MPMediaItem? = nil { didSet { currentSetCallCount += 1 } }

    private(set) var repeatModeSetCallCount = 0
    private var _repeatMode: RepeatMode!  { didSet { repeatModeSetCallCount += 1 } }
    var repeatMode: RepeatMode {
        get { return _repeatMode }
        set { _repeatMode = newValue }
    }

    private(set) var indexSetCallCount = 0
    var index: Int = 0 { didSet { indexSetCallCount += 1 } }

    private(set) var itemsSetCallCount = 0
    var items: [MPMediaItem] = [MPMediaItem]() { didSet { itemsSetCallCount += 1 } }

    private(set) var primeCallCount = 0
    var primeHandler: ((MPMediaItem) -> ())?
    func prime(_ track: MPMediaItem)  {
        primeCallCount += 1
        if let primeHandler = primeHandler {
            primeHandler(track)
        }
        
    }

    private(set) var itemCallCount = 0
    var itemHandler: ((MusicQueueTrackPosition) -> (MPMediaItem?))?
    func item(for position: MusicQueueTrackPosition) -> MPMediaItem? {
        itemCallCount += 1
        if let itemHandler = itemHandler {
            return itemHandler(position)
        }
        return nil
    }

    private(set) var resetCallCount = 0
    var resetHandler: (() -> ())?
    func reset()  {
        resetCallCount += 1
        if let resetHandler = resetHandler {
            resetHandler()
        }
        
    }

    private(set) var loadCallCount = 0
    var loadHandler: (() -> ())?
    func load()  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }

    private(set) var createCallCount = 0
    var createHandler: (() -> ())?
    func create()  {
        createCallCount += 1
        if let createHandler = createHandler {
            createHandler()
        }
        
    }

    private(set) var toggleRepeatModeCallCount = 0
    var toggleRepeatModeHandler: (() -> ())?
    func toggleRepeatMode()  {
        toggleRepeatModeCallCount += 1
        if let toggleRepeatModeHandler = toggleRepeatModeHandler {
            toggleRepeatModeHandler()
        }
        
    }
}

class AudioSessionMock: AudioSession {
    init() { }
    init(currentRoute: AVAudioSessionRouteDescription, outputRoutes: [AVAudioSession.Port] = [AVAudioSession.Port]()) {
        self._currentRoute = currentRoute
        self.outputRoutes = outputRoutes
    }


    private(set) var currentRouteSetCallCount = 0
    private var _currentRoute: AVAudioSessionRouteDescription!  { didSet { currentRouteSetCallCount += 1 } }
    var currentRoute: AVAudioSessionRouteDescription {
        get { return _currentRoute }
        set { _currentRoute = newValue }
    }

    private(set) var outputRoutesSetCallCount = 0
    var outputRoutes: [AVAudioSession.Port] = [AVAudioSession.Port]() { didSet { outputRoutesSetCallCount += 1 } }
}

